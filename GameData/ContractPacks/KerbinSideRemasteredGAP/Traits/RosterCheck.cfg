// -----------------------------------------------------------------
// Rostercheck
// Author: Caerfinon
// -----------------------------------------------------------------

// -----------------------------------------------------------------
// Citizens
// -----------------------------------------------------------------
CONTRACT_TYPE
{

//CONTRACT DESCRIPTION
	
	sortKey = 01
	name = RosterCheckCitizen
	title = Roster Check Citizens
	group = KSRGAP
	agent = Kerbin Side Remastered GAP

	description =  Remove dead misplaced kerbal citizens 
	genericDescription = Remove dead misplaced citizens 
	synopsis = Remove dead misplaced citizens   
	completedMessage = 	completedMessage = Roster check has removed a citizen named: @/kerbalremoved 

//Contract Limits
	maxCompletions = 0
	maxSimultaneous = 1
	autoAccept = true
	declinable = false
	cancellable = true
	minExpiry = 1.0
	maxExpiry = 1.0
	deadline = 0

//Contract Reward Modifiers
	prestige = Trivial
	targetBody = Kerbin
	
//Contract Rewards
	advanceFunds = 0
	rewardFunds = 0
	rewardReputation = 0
	rewardScience = 0

//Contract Penalties
	failureFunds = 0
	failureReputation = 0

// -----------------------------------------------------------------	
// REQUIREMENTS FOR CONTRACT TO APPEAR
// -----------------------------------------------------------------	
//
// Comment about requirement


	// Only Dead Crew members with specific experience Trait can cause the contract to be offered
		
	REQUIREMENT
	{
		name = Expression
		type = Expression
		title = Citizens 
		expression = AllKerbals().Where(k => k.RosterStatus() == Dead && k.Type() == Crew && k.ExperienceTrait() == Citizen).Count() > 0
	}

// -----------------------------------------------------------------	
//DATA NODES TO PROCESS FOR CONTRACT USE
// -----------------------------------------------------------------

   
   // Create list of Kerbals    
   DATA
   {
        type = List<Kerbal>
        hidden = true
		KerbalToRemove = AllKerbals().Where(k => k.RosterStatus() == Dead && k.Type() == Crew && k.ExperienceTrait() == Citizen).Random(1)
	}
	
	DATA
	{ 
		type = String
		hidden = true
		kerbalremoved = @KerbalToRemove.ElementAt(0)
	}
 
// -----------------------------------------------------------------
//BEHAVIOURS FOR CONTRACT
// -----------------------------------------------------------------
	
	// remove kerbal
	BEHAVIOUR
	{
		name = RemoveKerbal
		type = RemoveKerbal
		kerbal = @/KerbalToRemove.ElementAt(0)
	}

// -----------------------------------------------------------------
//PARAMETERS FOR CONTRACT COMPLETION
// -----------------------------------------------------------------
//
	PARAMETER
	{
		name = Check
		type = Duration
		
		duration = 5s
		preWaitText = Roster Check:
		waitingText = Checking: 
		completionText =  Roster Check complete
	}

// -----------------------------------------------------------------
// END OF CONTRACT
// -----------------------------------------------------------------
}


// -----------------------------------------------------------------
// Civil-Servants
// -----------------------------------------------------------------
CONTRACT_TYPE
{

//CONTRACT DESCRIPTION
	
	sortKey = 01
	name = RosterCheckCivil-Servant
	title = Roster Check Civil-Servants
	group = KSRGAP
	agent = Kerbin Side Remastered GAP

	description =  Remove dead misplaced kerbal civil-servants
	genericDescription = Remove dead misplaced civil-servants
	synopsis = Remove dead misplaced civil-servants  
	completedMessage = Roster check has removed a civil-servant named: @/kerbalremoved 

//Contract Limits
	maxCompletions = 0
	maxSimultaneous = 1
	autoAccept = true
	declinable = false
	cancellable = true
	minExpiry = 1.0
	maxExpiry = 1.0
	deadline = 0

//Contract Reward Modifiers
	prestige = Trivial
	targetBody = Kerbin
	
//Contract Rewards
	advanceFunds = 0
	rewardFunds = 0
	rewardReputation = 0
	rewardScience = 0

//Contract Penalties
	failureFunds = 0
	failureReputation = 0

// -----------------------------------------------------------------	
// REQUIREMENTS FOR CONTRACT TO APPEAR
// -----------------------------------------------------------------	
//
// Comment about requirement


	// Only Dead Crew members with specific experience Trait can cause the contract to be offered
		
	REQUIREMENT
	{
		name = Expression
		type = Expression
		title = Civil-Servants 
		expression = AllKerbals().Where(k => k.RosterStatus() == Dead && k.Type() == Crew && k.ExperienceTrait() == "Civil-Servant").Count() > 0
	}

// -----------------------------------------------------------------	
//DATA NODES TO PROCESS FOR CONTRACT USE
// -----------------------------------------------------------------

   
   // Create list of Kerbals    
   DATA
   {
        type = List<Kerbal>
        hidden = true
		KerbalToRemove = AllKerbals().Where(k => k.RosterStatus() == Dead && k.Type() == Crew && k.ExperienceTrait() == "Civil-Servant").Random(1)
	}
	DATA
	{ 
		type = String
		hidden = true
		kerbalremoved = @KerbalToRemove.ElementAt(0)
	}
	
	

 
// -----------------------------------------------------------------
//BEHAVIOURS FOR CONTRACT
// -----------------------------------------------------------------
	
	// remove kerbal
	BEHAVIOUR
	{
		name = RemoveKerbal
		type = RemoveKerbal
		kerbal = @/KerbalToRemove.ElementAt(0)
	}

// -----------------------------------------------------------------
//PARAMETERS FOR CONTRACT COMPLETION
// -----------------------------------------------------------------
//
	PARAMETER
	{
		name = Check
		type = Duration
		
		duration = 5s
		preWaitText = Roster Check:
		waitingText = Checking: 
		completionText =  Roster Check complete
	}

// -----------------------------------------------------------------
// END OF CONTRACT
// -----------------------------------------------------------------
}

// -----------------------------------------------------------------
// ServiceKerbals
// -----------------------------------------------------------------
CONTRACT_TYPE
{

//CONTRACT DESCRIPTION
	
	sortKey = 01
	name = RosterCheckServiceKerbal
	title = Roster Check Servicekerbals
	group = KSRGAP
	agent = Kerbin Side Remastered GAP

	description =  Remove dead misplaced kerbal servicekerbals
	genericDescription = Remove dead misplaced servicekerbals
	synopsis = Remove dead misplaced servicekerbals 
	completedMessage = Roster check has removed a servicekerbal named: @/kerbalremoved 

//Contract Limits
	maxCompletions = 0
	maxSimultaneous = 1
	autoAccept = true
	declinable = false
	cancellable = true
	minExpiry = 1.0
	maxExpiry = 1.0
	deadline = 0

//Contract Reward Modifiers
	prestige = Trivial
	targetBody = Kerbin
	
//Contract Rewards
	advanceFunds = 0
	rewardFunds = 0
	rewardReputation = 0
	rewardScience = 0

//Contract Penalties
	failureFunds = 0
	failureReputation = 0

// -----------------------------------------------------------------	
// REQUIREMENTS FOR CONTRACT TO APPEAR
// -----------------------------------------------------------------	
//
// Comment about requirement


	// Only Dead Crew members with specific experience Trait can cause the contract to be offered
		
	REQUIREMENT
	{
		name = Expression
		type = Expression
		title = Servicekerbals
		expression = AllKerbals().Where(k => k.RosterStatus() == Dead && k.Type() == Crew && k.ExperienceTrait() == ServiceKerbal).Count() > 0
	}

// -----------------------------------------------------------------	
//DATA NODES TO PROCESS FOR CONTRACT USE
// -----------------------------------------------------------------

   
   // Create list of Kerbals    
   DATA
   {
        type = List<Kerbal>
        hidden = true
		KerbalToRemove = AllKerbals().Where(k => k.RosterStatus() == Dead && k.Type() == Crew && k.ExperienceTrait() == ServiceKerbal).Random(1)
	}
	DATA
	{ 
		type = String
		hidden = true
		kerbalremoved = @KerbalToRemove.ElementAt(0)   
	}
	
	

 
// -----------------------------------------------------------------
//BEHAVIOURS FOR CONTRACT
// -----------------------------------------------------------------
	
	// remove kerbal
	BEHAVIOUR
	{
		name = RemoveKerbal
		type = RemoveKerbal
		kerbal = @/KerbalToRemove.ElementAt(0)
	}

// -----------------------------------------------------------------
//PARAMETERS FOR CONTRACT COMPLETION
// -----------------------------------------------------------------
//
	PARAMETER
	{
		name = Check
		type = Duration
		
		duration = 10s
		preWaitText = Roster Check:
		waitingText = Checking: 
		completionText =  Roster Check complete
	}

// -----------------------------------------------------------------
// END OF CONTRACT
// -----------------------------------------------------------------
}