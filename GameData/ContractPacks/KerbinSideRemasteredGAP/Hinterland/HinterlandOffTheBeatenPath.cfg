// -----------------------------------------------------------------
//	CONTRACT:  KSRGAP-Hinterland-Off-The-Beaten-Path - Kerbin Side Hinterland Tours - Crew: 1 Passengers: 2-3
//	Author: Caerfinon 
//	Credits:
//	{
//		Original GAP: Author - inigma
//		Original Kerbin side GAP: Author - Keniamin 
//		Based on Contract HardSciene.cfg from "Field Research" - Author: nightingale
//	}
// -----------------------------------------------------------------

// DRAFT
CONTRACT_TYPE:NEEDS[KerbinSideRemasteredGapExtras]
{
	sortKey = KSRGAP-Hinterland3
	name = KSRGAP-Hinterland-Off-The-Beaten-Path
	title = Hinterland Off The Beaten Path
	group = Kerbin Side Hinterland Tours
	agent = Kerbin Side Hinterland Tours

	description = A new charter has been received to take @/numPassengers travellers to the @/tourLocation on @/tourPurpose adventure. Leave from any airport with your passengers onboard, travel to the destination and make a landing, Then return to an airport and recover your passengers.  
	genericDescription = A new charter has been received to take some travellers on a unique hinterland adventure. Leave from any airport with your passengers onboard, travel to the destination and make a landing, Then return to an airport and recover your passengers.  
	synopsis = Take passengers on a charter flight into one of Kerbin's truely unique hinterland locations.
	notes = @isLanded ? @landStr : @waterStr
	completedMessage = Hinterland tour completed! See you next time, adventure is just a flight away.

//Contract Limits
	maxCompletions = 0
	maxSimultaneous = 1
	autoAccept = false
	declinable = true
	cancellable = true
	minExpiry = 1.0
	maxExpiry = 1.0
	deadline = 0

//Contract Reward Modifiers
    prestige = Significant
	targetBody = Kerbin
	
//Contract Rewards
	rewardFunds = @KSRGAP:rewardBaseValue * 3 * Random(1.0,1.15)
	advanceFunds = (@/rewardFunds * 0.25 )
	rewardReputation = 1
    rewardScience = 0

//Contract Penalties
	failureFunds =  (@/rewardFunds * 1.15) * Random(1.0, 1.25)  
	failureReputation = 10
	
// REQUIREMENTS FOR CONTRACT TO APPEAR

//Must have completed Hinterland-Adventure-Tour
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = KSRGAP-Hinterland-Adventure-Tour
		minCount = 1
	}
	
//After mission is complete wait 1 day before offering it again	
	REQUIREMENT
	{
		title = Cool down timer 7 day
		name = CompleteContract
		type = CompleteContract
		minCount = 0
		contractType = KSRGAP-Hinterland-Off-The-Beaten-Path
		cooldownDuration = 7d
	}

//DATA NODES TO PROCESS FOR CONTRACT USE
//Contract Specific VesselParameterGroup Definition Key (to prevent conflict with other active contracts)
	DATA
	{
		type = string
		craft = KSRGAP-Hinterland-Off-The-Beaten-Path
		
	}
	
	DATA
	{
		type = List<string>
		tourPurposeData = ["a sightseeing", "a picnicing", "a research", "a surveying", "an exploration", "a data collecting"]
		hidden = true
	}
	
	DATA
	{
		type = string
		tourPurpose = @/tourPurposeData.Random()
		hidden = true
	}	
	
	
//List of Possible ATC characters
	DATA
	{
		type = List<string>
		
		ATCtypes = ["ATC_M" ,"ATC_F"]
		
		hidden = true 
	}
	
//Pick Random ATC character to Use for dialog
	DATA
	{
		type = string
		
		ATC = @/ATCtypes.Random()
		
		hidden = true
		
	}

//Party of VIKs 
	DATA
	{
		type = int
		passengers = 3
	
	}

	DATA
	{
		type = List<Kerbal>
		Citizens = [ NewKerbalWithTrait("Citizen"),NewKerbalWithTrait("Citizen"),NewKerbalWithTrait("Citizen") ]
		hidden = true 
		
	}


	DATA
	{
		type = List<Kerbal>
		kerbalsPassengers = @Citizens
		hidden = true
		
	}
	
// Pick a destination Airstrip location
	DATA
	{
		type = int
		dstSite = Random(0,19)
		hidden = true
	}
	
// Pic the regional location for the VIK 

    DATA
	{
		type = List<string>
		sitecodetypes = ["A" ,"B"]
		hidden = true
	}
	
	DATA
	{
		type = string
		sitecode = @/site3codetypes.Random()
		hidden = true
	}
	
	DATA
	{
		type = bool
		isA = @/sitecode == "A" 
	}
	
	
	DATA
	{
		type = int
		srcSite =  @/isA ? @KSRGAP:stripRegionalA.ElementAt(@/fltLocationSelection) : @KSRGAP:stripRegionalB.ElementAt(@/fltLocationSelection)
		hidden = true
    }

//Text for name= in Air Terminals Waypoints
	DATA
	{
		type = string
		nameTerminalSrc = @KSRGAP:siteName.ElementAt(@/srcSite) + " Air Terminal"
		hidden = true
	}


// -----------------------------------------------------------------
//BEHAVIOURS TO DO WHEN CREATING CONTRACT
// -----------------------------------------------------------------


	
	// spawn Kerbals at pickup location
	BEHAVIOUR
	{
		name = SpawnKerbal
		type = SpawnKerbal

		KERBAL
		{
			kerbal = @/kerbalsPassengers.ElementAt(0)
			kerbalType = Unowned
			owned = false
			addToRoster = false
			lat = @KSRGAP:siteVikTerminalLAT.ElementAt(@/srcSite) + (Random(-99,99) / 100000)
			lon = @KSRGAP:siteVikTerminalLON.ElementAt(@/srcSite) + (Random(-99,99) / 100000)
			heading = Random(0,359)
		}
		KERBAL
		{
			kerbal = @/kerbalsPassengers.ElementAt(0)
			kerbalType = Unowned
			owned = false
			addToRoster = false
			lat = @KSRGAP:siteVikTerminalLAT.ElementAt(@/srcSite) + (Random(-99,99) / 100000)
			lon = @KSRGAP:siteVikTerminalLON.ElementAt(@/srcSite) + (Random(-99,99) / 100000)
			heading = Random(0,359)
			
		}
		KERBAL
		{
			kerbal = @/kerbalsPassengers.ElementAt(0)
			kerbalType = Unowned
			owned = false
			addToRoster = false
			lat = @KSRGAP:siteVikTerminalLAT.ElementAt(@/srcSite) + (Random(-99,99) / 100000)
			lon = @KSRGAP:siteVikTerminalLON.ElementAt(@/srcSite) + (Random(-99,99) / 100000)
			heading = Random(0,359)
		}
	}

// Waypoint to determine tour destination
	BEHAVIOUR
	{
        name = WaypointGenerator
        type = WaypointGenerator
		
		WAYPOINT
		{
			name = @KSRGAP:siteName.ElementAt(@/srcSite) 
			targetBody = @/targetBody
			icon = ContractPacks/KerbinSideRemasteredGAP/Assets/Icons/Airport
			latitude = @KSRGAP:siteLAT.ElementAt(@/srcSite)
			longitude = @KSRGAP:siteLON.ElementAt(@/srcSite)
			altitude = 0
		}

		WAYPOINT
		{
			name = name = @/nameTerminalSrc
			icon = ContractPacks/KerbinSideRemasteredGAP/Assets/Icons/terminal
			targetBody = @/targetBody
			latitude = @KSRGAP:siteVikTerminalLAT.ElementAt(@/srcSite)
			longitude = @KSRGAP:siteVikTerminalLON.ElementAt(@/srcSite)
			parameter = RequestLandingSite2
			altitude = 0
		}

		// Destination Airstrip
		WAYPOINT
		{
			name = @KSRGAP:stripName.ElementAt(@/dstSite) 
			targetBody = @/targetBody
			icon = ContractPacks/KerbinSideRemasteredGAP/Assets/Icons/Airstrip
			latitude = @KSRGAP:stripLAT.ElementAt(@/dstSite)
			longitude = @KSRGAP:stripLON.ElementAt(@/dstSite)
			altitude = 0
		}
						

		WAYPOINT
		{
			name = KSC Runway
			hidden = true
			latitude = @KSRGAP:kscRunwayLAT
			longitude = @KSRGAP:kscRunwayLON
			altitude = 0
		}
	
    }
	
// misssion dialog boxes	
	BEHAVIOUR
	{
		name = DialogBox
		type = DialogBox

// failed misssion dialog
		DIALOG_BOX
		{
			condition = CONTRACT_FAILED
			
			position = CENTER
			title = <b>Sometimes Things Go Wrong</b>
			titleColor = #FF0000
			
			TEXT
			{
				text = ATC: Hinterland One, Are you there? please respond. Hinterland One, we've lost you on radar, do you copy? Are you declaring an emergency?.... and you were doing so well.
				fontSize = 20
				textColor = #FF0000				
			}
			
			IMAGE
			{
				url = ContractPacks/KerbinSideRemasteredGAP/Assets/Characters/@/ATC
				characterName = Air Traffic Control
			}
			BREAK
			{
			}
			TEXT
			{
				text = Start recovery operations immediately of your aircraft and the remaining passengers and crew. The KAA will be launching an investigation into this tragedy.
				fontSize = 20
				textColor = #B00B1E
			}
		}
		
	}

//PARAMETERS FOR CONTRACT COMPLETION
//Craft definition
	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup
		title = Your aircraft must
		define = @/craft
		disableOnStateChange = false

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = have a certified pilot
			trait = Pilot
			minCrew = 1
			disableOnStateChange = false
			hideChildren = true
		}
		
	}
	
//Navigate to waypoint requirement include landing to a complete stop
	PARAMETER
	{
		name = All
		type = All
		title = Travel to the Tour Destination
		disableOnStateChange = true
		completeInSequence = true
		targetBody = @/targetBody
		
		PARAMETER
		{
			title = be flying
			name = ReachState
			type = ReachState
			situation = Flying
			disableOnStateChange = true
			targetBody = @/targetBody
		}
		PARAMETER
		{
			name = Landing
			type = All
			title = Land your bush plane
			notes = be within 500 meters of the marker
			completeInSequence = true
			disableOnStateChange = true
			targetBody = @/targetBody
			PARAMETER
			{
				title = and come to a stop
				name = ReachState
				type = ReachState
				hideChildren = true
				maxSpeed = 0.0
				situation = @/isLanded ? LANDED : SPLASHED
				disableOnStateChange = false
				targetBody = @/targetBody

			}
			PARAMETER
			{
				title = near the Tour Destination marker
				name = VisitWaypoint
				type = VisitWaypoint
				index = 0
				distance = 500
				horizontalDistance = 500
				showMessages = true
				disableOnStateChange = false
				targetBody = @/targetBody
 
			}
		}
	}

	PARAMETER
	{
		title = When ready, take off and return to the skies
		name = ReachState
		type = ReachState
		situation = Flying
		disableOnStateChange = true
		completeInSequence = true
		targetBody = @/targetBody
	}


//Recovery Parameter - Landing
	PARAMETER
	{
		name = Any
		type = Any
		title = Return to a location of your choosing for recovery
		completeInSequence = true
		disableOnStateChange = false

		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = any airport runway will do
			vessel = @/craft
			disableOnStateChange = false
			hideChildren = true	

			PARAMETER
			{
				name = ReachState
				type = ReachState
				targetBody = @/targetBody
				situation = LANDED
				maxSpeed = 0.0
				disableOnStateChange = false
				hideChildren = true
			}
		}
	}

//Recovery Parameter - Craft & Kerbal Safety Check
	PARAMETER
	{
		name = All
		type = All
		title = safely
		completeInSequence = true
		disableOnStateChange = true
		
		PARAMETER
		{
			name = VesselNotDestroyed
			type = VesselNotDestroyed
			title = without destroying your aircraft
			vessel = @/craft
		}
		
		PARAMETER
		{
			name = KerbalDeaths
			type = KerbalDeaths
			title = or killing anyone
			vessel = @/craft
		}
	}
	
//Recovery Parameter - Recover Kerbals
	PARAMETER
	{
		name = All
		type = All
		title = and recover all @/numPassengers passengers
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			title = @kerbal.First()
	
			ITERATOR
			{
				type = Kerbal
				kerbal = @/kerbals	
			}
			
			hideChildren = true
			hidden = true
			
		}
	}

// -----------------------------------------------------------------
// END OF CONTRACT
// -----------------------------------------------------------------
}
