// -----------------------------------------------------------------
//	CONTRACT:  KSRGAPHinterland-Remote-Bush-Plane-Adventure - Kerbin Side Hinterland Tours - Crew: 1 Passengers: 2-3
//	Author: Caerfinon 
//	Credits:
//	{
//		Original GAP: Author - inigma
//		Original Kerbin side GAP: Author - Keniamin 
//		Based on Contract HardSciene.cfg from "Field Research" - Author: nightingale
//	}
// -----------------------------------------------------------------


CONTRACT_TYPE
{
	sortKey = KSRGAP-Hinterland2
	name = KSRGAP-Hinterland-Remote-Bush-Plane-Adventure
	title = Hinterland Remote Bush Plane Adventure
	group = Kerbin Side Hinterland Tours
	agent = Kerbin Side Hinterland Tours

	description = A new charter has been received to take @/numPassengers travellers to the @/tourLocation on @/tourPurpose adventure. Leave from any airport with your passengers onboard, travel to the destination and make a landing, Then return to an airport and recover your passengers.  
	genericDescription = A new charter has been received to take some travellers on a unique hinterland adventure. Leave from any airport with your passengers onboard, travel to the destination and make a landing, Then return to an airport and recover your passengers.  
	synopsis = Take passengers on a charter flight into one of Kerbin's truely unique hinterland locations.
	notes = @isLanded ? @landStr : @waterStr
	completedMessage = Hinterland tour completed! See you next time, adventure is just a flight away.

//Contract Limits
	maxCompletions = 0
	maxSimultaneous = 1
	autoAccept = false
	declinable = true
	cancellable = true
	minExpiry = 1.0
	maxExpiry = 1.0
	deadline = 0

//Contract Reward Modifiers
    prestige = Significant
	targetBody = Kerbin
	
//Contract Rewards
	rewardFunds = @KSRGAP:rewardBaseValue * 3 * Random(1.0,1.15)
	advanceFunds = (@/rewardFunds * 0.25 )
	rewardReputation = 1
    rewardScience = 0

//Contract Penalties
	failureFunds =  (@/rewardFunds * 1.15) * Random(1.0, 1.25)  
	failureReputation = 10
	
// REQUIREMENTS FOR CONTRACT TO APPEAR

//Must have completed Hinterland-Adventure-Tour
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = KSRGAP-Hinterland-Adventure-Tour
		minCount = 1
	}
	
//After mission is complete wait 1 day before offering it again	
	REQUIREMENT
	{
		title = Cool down timer 1 day
		name = CompleteContract
		type = CompleteContract
		minCount = 0
		contractType = KSRGAP-Hinterland-Remote-Bush-Plane-Adventure
		cooldownDuration = 1d
	}

//DATA NODES TO PROCESS FOR CONTRACT USE
//Contract Specific VesselParameterGroup Definition Key (to prevent conflict with other active contracts)
	DATA
	{
		type = string
		craft = KSRGAPHinterland-Bush-Plane-Adventure
		
	}


//Pick 1 Zone for Tour Destination for Use by Waypoint Generator Behavior
	
	DATA
	{
		type = string
		tourLocation = "remote " + @/biome.FullName() 
		hidden = true
	}
	
	DATA
	{
		type = List<string>
		tourPurposeData = ["a sightseeing", "a picnicing", "a research", "a surveying", "an exploration", "a data collecting"]
		hidden = true
	}
	
	DATA
	{
		type = string
		tourPurpose = @/tourPurposeData.Random()
		hidden = true
	}	
	
	
//List of Possible ATC characters
	DATA
	{
		type = List<string>
		
		ATCtypes = ["ATC_M" ,"ATC_F"]
		
		hidden = true 
	}
	

	
//Pick Random ATC character to Use for dialog
	DATA
	{
		type = string
		
		ATC = @/ATCtypes.Random()
		
		hidden = true
		
	}

    DATA
    {
        type = string
        hidden = true

        waterStr = Strange as it sounds, your aircraft should be prepared for a water landing at @biome.FullName().
		waterLnfg = SPLASHED
		landLndg = LANDED
        landStr = Strange as it sounds, your aircraft should be prepared for a ground landing at @biome.FullName().
    }

    DATA
    {
        type = Biome
        hidden = true
        biome = @ss0.Biome()
    }

    DATA
    {
        type = ExperimentSituations
        hidden = true
        situation = @ss0.Situation()
    }

    DATA
    {
        type = bool
        isLanded = @situation == SrfLanded
    }

    DATA
    {
        type = List<CelestialBody>
        hidden = true
        validBodies = [ HomeWorld() ]
    }

    DATA
    {
        type = List<ScienceSubject>
        hidden = true

        ssTemp1 = DifficultScienceSubjectsByBody(@validBodies)
 		ssTemp2 = @ssTemp1.Where(s => s.RemainingScience() >= 0.0 && s.Experiment() != asteroidSample)
    }

    DATA
    {
        type = ScienceSubject
        hidden = true
		  ss0 = @ssTemp2.Random()
    }

    DATA
    {
        type = List<Location>
        hidden = true

        locations = @biome.DifficultLocations()

    }

    DATA
    {
        type = Location
        requiredValue = false

        loc0 = @locations.Random()

    }

//Passenger Data
	DATA
	{
		type = int
		numPassengers = Random(2, 3)
	
	}
	DATA
	{
		type = List<Kerbal>
		Citizens = [ NewKerbalWithTrait("Citizen"),NewKerbalWithTrait("Citizen"),NewKerbalWithTrait("Citizen")]
		hidden = true			   
		
	}

	DATA
	{
		type = List<Kerbal>
		kerbals = @Citizens.Random(@numPassengers)
		hidden = true
		
	}
// -----------------------------------------------------------------
//BEHAVIOURS TO DO WHEN CREATING CONTRACT
// -----------------------------------------------------------------
// spawn passengers
	BEHAVIOUR
	{
        name = SpawnPassengers
        type = SpawnPassengers
		kerbal = @/kerbals 		
		kerbalType = Unowned
	}

// Waypoint to determine tour destination
	BEHAVIOUR
	{
        name = WaypointGenerator
        type = WaypointGenerator
		
		WAYPOINT
		{
            name = "Remote @/biome.Name()"
            icon = ContractPacks/KerbinSideRemasteredGAP/Assets/Icons/seaplane

            latitude = @/loc0.Latitude()
            longitude = @/loc0.Longitude()
            altitude = 0.0
        }

    }
	
// misssion dialog boxes	
	BEHAVIOUR
	{
		name = DialogBox
		type = DialogBox

// failed misssion dialog
		DIALOG_BOX
		{
			condition = CONTRACT_FAILED
			
			position = CENTER
			title = <b>Sometimes Things Go Wrong</b>
			titleColor = #FF0000
			
			TEXT
			{
				text = ATC: Hinterland One, Are you there? please respond. Hinterland One, we've lost you on radar, do you copy? Are you declaring an emergency?.... and you were doing so well.
				fontSize = 20
				textColor = #FF0000				
			}
			
			IMAGE
			{
				url = ContractPacks/KerbinSideRemasteredGAP/Assets/Characters/@/ATC
				characterName = Air Traffic Control
			}
			BREAK
			{
			}
			TEXT
			{
				text = Start recovery operations immediately of your aircraft and the remaining passengers and crew. The KAA will be launching an investigation into this tragedy.
				fontSize = 20
				textColor = #B00B1E
			}
		}
		
	}

//PARAMETERS FOR CONTRACT COMPLETION
//Craft definition
	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup
		title = Your aircraft must
		define = @/craft
		disableOnStateChange = false

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			title = have a certified pilot
			trait = Pilot
			minCrew = 1
			disableOnStateChange = false
			hideChildren = true
		}
		
		PARAMETER
		{
			name = HasCrewCapacity
			type = HasCrewCapacity
			title = have at least @/numPassengers passenger seats
			minCapacity = @/numPassengers + 1
			disableOnStateChange = false
		}
		
		//Passenger Manifest - Load Passengers
		PARAMETER
		{
			name = HasPassengers
			type = HasPassengers
			notes = Passengers can ONLY be loaded after the vessel has launched. They cannot board from the SPH.
			title = load all @/numPassengers passengers
			count = @/numPassengers				
			hideChildren = true
		}
	}
	
//Navigate to waypoint requirement include landing to a complete stop
	PARAMETER
	{
		name = All
		type = All
		title = Travel to the Tour Destination
		disableOnStateChange = true
		completeInSequence = true
		targetBody = @/targetBody
		
		PARAMETER
		{
			title = be flying
			name = ReachState
			type = ReachState
			situation = Flying
			disableOnStateChange = true
			targetBody = @/targetBody
		}
		PARAMETER
		{
			name = Landing
			type = All
			title = Land your bush plane
			notes = be within 500 meters of the marker
			completeInSequence = true
			disableOnStateChange = true
			targetBody = @/targetBody
			PARAMETER
			{
				title = and come to a stop
				name = ReachState
				type = ReachState
				hideChildren = true
				maxSpeed = 0.0
				situation = @/isLanded ? LANDED : SPLASHED
				disableOnStateChange = false
				targetBody = @/targetBody

			}
			PARAMETER
			{
				title = near the Tour Destination marker
				name = VisitWaypoint
				type = VisitWaypoint
				index = 0
				distance = 500
				horizontalDistance = 500
				showMessages = true
				disableOnStateChange = false
				targetBody = @/targetBody
 
			}
		}
	}

	PARAMETER
	{
		title = When ready, take off and return to the skies
		name = ReachState
		type = ReachState
		situation = Flying
		disableOnStateChange = true
		completeInSequence = true
		targetBody = @/targetBody
	}


//Recovery Parameter - Landing
	PARAMETER
	{
		name = Any
		type = Any
		title = Return to a location of your choosing for recovery
		completeInSequence = true
		disableOnStateChange = false

		PARAMETER
		{
			name = VesselParameterGroup
			type = VesselParameterGroup
			title = any airport runway will do
			vessel = @/craft
			disableOnStateChange = false
			hideChildren = true	

			PARAMETER
			{
				name = ReachState
				type = ReachState
				targetBody = @/targetBody
				situation = LANDED
				maxSpeed = 0.0
				disableOnStateChange = false
				hideChildren = true
			}
		}
	}

//Recovery Parameter - Craft & Kerbal Safety Check
	PARAMETER
	{
		name = All
		type = All
		title = safely
		completeInSequence = true
		disableOnStateChange = true
		
		PARAMETER
		{
			name = VesselNotDestroyed
			type = VesselNotDestroyed
			title = without destroying your aircraft
			vessel = @/craft
		}
		
		PARAMETER
		{
			name = KerbalDeaths
			type = KerbalDeaths
			title = or killing anyone
			vessel = @/craft
		}
	}
	
//Recovery Parameter - Recover Kerbals
	PARAMETER
	{
		name = All
		type = All
		title = and recover all @/numPassengers passengers
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			title = @kerbal.First()
	
			ITERATOR
			{
				type = Kerbal
				kerbal = @/kerbals	
			}
			
			hideChildren = true
			hidden = true
			
		}
	}

// -----------------------------------------------------------------
// END OF CONTRACT
// -----------------------------------------------------------------
}
